{
  "metadata": {
    "repo": "Vibe-coding-nvm-delete-repo/yt",
    "generated": "2025-10-18",
    "total_issues": 13,
    "labels": [
      "refactor",
      "tech-debt",
      "performance",
      "modularity",
      "ci",
      "observability",
      "security",
      "docs"
    ]
  },
  "epic_issue": {
    "title": "Epic: Refactor to Cut Tech Debt + Boost Velocity/Performance",
    "body": "# Epic: Refactor to Cut Tech Debt + Boost Velocity/Performance\n\n## Mode\n\n**Execution:** Incremental, measurable changes; public contracts preserved; issues-only workflow\n**Strategy:** Small, reversible PRs with rollback plans\n**Quality Gates:** All changes must pass `npm run check:ci` (lint + typecheck + type:contracts + tests)\n\n## Repo Context\n\n**Repository:** Vibe-coding-nvm-delete-repo/yt\n**Tech Stack:** Next.js 15 + React 19 + TypeScript 5 + Tailwind 4 + OpenRouter API\n**Purpose:** AI-powered YouTube content creation tools (image-to-prompt, prompt creator, batch processing)\n**Current State:** Functional MVP with comprehensive test coverage (â‰¥60%) and strict TypeScript\n\n## Goals & Targets\n\n### DORA Metrics\n- **Lead Time:** â‰¤ 4h (from commit to production)\n- **Deploy Frequency:** â‰¥ 2/day\n- **Change Failure Rate:** â‰¤ 5%\n- **MTTR:** â‰¤ 15 min\n\n### Performance Targets (Critical Endpoints)\n- **P50 Latency:** â‰¤ 200ms (API calls)\n- **P95 Latency:** â‰¤ 800ms\n- **Error Rate:** â‰¤ 0.5%\n- **Bundle Size:** â‰¤ 200KB (First Load JS)\n\n### CI/CD Targets\n- **Total CI Time:** â‰¤ 3 min (currently: 25s, target: maintain or improve)\n- **Test Execution:** â‰¤ 10s (currently: 7.5s)\n- **Flaky Tests:** 0% (currently: 0%)\n\n### Maintainability Targets\n- **Function Complexity:** CC â‰¤ 10\n- **File Size:** â‰¤ 500 LOC (currently: 12 files over limit)\n- **Code Duplication:** â‰¤ 5%\n\n### Dependencies\n- **CVEs:** 0 critical/high (currently: 0 âœ“)\n- **Outdated Deps:** Key libs â‰¤ 1 minor behind\n\n## Baseline (Quick Audit)\n\n| Metric | Current | Target | Status |\n|--------|---------|--------|--------|\n| **Largest File** | 1,711 LOC | 500 LOC | ðŸ”´ Critical |\n| **Files >300 LOC** | 12 files | 0 files | ðŸŸ¡ High |\n| **CI Total Time** | 25.7s | â‰¤ 180s | âœ… Good |\n| **Test Time** | 7.5s | â‰¤ 10s | âœ… Good |\n| **Test Coverage** | â‰¥60% | â‰¥60% | âœ… Good |\n| **Security Vulns** | 0 | 0 | âœ… Clean |\n| **Build Success** | Fails (font CDN) | Pass | ðŸŸ¡ Medium |\n| **Flaky Tests** | 0 | 0 | âœ… Good |\n| **Bundle Size** | Unknown | â‰¤200KB | ðŸ“Š Needs Baseline |\n\n### Top Pain Points Identified\n\n1. **Monolithic Components:** `SettingsTab.tsx` (1,711 LOC), `PromptCreatorTab.tsx` (974 LOC), `ImageToPromptTab.tsx` (838 LOC)\n2. **Large Storage Module:** `storage.ts` (723 LOC) - complex singleton with multiple concerns\n3. **Build Failures:** Google Fonts CDN blocking production builds\n4. **Missing Observability:** No performance tracking, error reporting, or user analytics\n5. **Bundle Size Unknown:** No bundle analysis in CI/CD\n6. **API Cost Tracking:** OpenRouter API costs tracked but not monitored/alerted\n\n## Workstreams & Sub-Issues\n\n### Phase 1: Foundation (High ROI, Low Risk)\n- [ ] #T1: Decompose SettingsTab.tsx into Sub-Components (Category: Modularity)\n- [ ] #T2: Split storage.ts into Domain-Specific Stores (Category: Modularity)\n- [ ] #T3: Fix Build Failures - Self-Host Fonts (Category: CI)\n\n### Phase 2: Performance & Observability (Medium ROI, Medium Risk)\n- [ ] #T4: Implement Bundle Size Monitoring & Code-Splitting (Category: Performance)\n- [ ] #T5: Add Golden Signals Observability for Top 5 Paths (Category: Observability)\n- [ ] #T6: Optimize OpenRouter API - Retry Logic & Circuit Breaker (Category: Performance)\n\n### Phase 3: Developer Experience (Medium ROI, Low Risk)\n- [ ] #T7: Refactor PromptCreatorTab.tsx into Focused Components (Category: Modularity)\n- [ ] #T8: Extract Shared Form Utilities & Validation (Category: Modularity)\n- [ ] #T9: Enhance CI Pipeline - Parallel Jobs & Caching (Category: CI)\n\n### Phase 4: Quality & Documentation (Low ROI, High Value)\n- [ ] #T10: Add E2E Tests for Critical User Journeys (Category: CI)\n- [ ] #T11: Update Architecture Diagrams & Component Map (Category: Docs)\n- [ ] #T12: Create Runbook for Production Monitoring (Category: Docs)\n\n## Prioritized Order (Top 5 by ROI)\n\n1. **#T3: Fix Build Failures** - CRITICAL blocker for production deployment\n2. **#T1: Decompose SettingsTab.tsx** - Highest technical debt, impacts velocity\n3. **#T5: Add Golden Signals Observability** - Production blindness is risky\n4. **#T4: Implement Bundle Size Monitoring** - Performance baseline critical\n5. **#T2: Split storage.ts** - Reduces complexity, enables better testing\n\n## Exit Criteria\n\n- âœ… All 12 files >300 LOC refactored to â‰¤500 LOC\n- âœ… Production build succeeds without external CDN dependencies\n- âœ… Bundle size monitored in CI with size budget alerts\n- âœ… Golden signals (latency, errors, traffic, saturation) instrumented\n- âœ… CI time remains â‰¤3 min (target: maintain current 25s)\n- âœ… Test coverage maintained at â‰¥60%\n- âœ… Architecture diagrams updated with current component boundaries\n- âœ… Runbook created for production monitoring and alerting\n- âœ… All public contracts preserved (no breaking changes)\n\n## Search & Filter\n\n**Find all related issues:**\n```\nis:issue is:open label:refactor label:tech-debt repo:Vibe-coding-nvm-delete-repo/yt\n```\n\n**By category:**\n- Performance: `label:performance`\n- Modularity: `label:modularity`\n- CI/CD: `label:ci`\n- Observability: `label:observability`\n- Documentation: `label:docs`\n\n## Risk Management\n\n### Rollback Plan\n- All changes behind feature flags where applicable\n- Database/storage migrations are additive only\n- Preserve existing APIs with deprecation warnings\n\n### Quality Gates\n- Every PR must pass: `npm run check:ci`\n- Visual regression tests for UI changes\n- Performance budgets enforced in CI\n- Security audit on every dependency change\n\n## Success Metrics\n\n**Track weekly:**\n- Technical debt ratio (debt/codebase size)\n- Mean time to merge PR\n- Mean time to resolve incidents\n- Developer satisfaction (survey)\n\n**Review monthly:**\n- DORA metrics progress\n- Performance metrics vs targets\n- Coverage trends\n- Incident frequency",
    "labels": ["refactor", "tech-debt", "epic"],
    "assignees": [],
    "milestone": null
  },
  "sub_issues": []
}
